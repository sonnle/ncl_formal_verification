; Formal verification proof - input completeness of test_netlist8x8.txt
(set-logic QF_BV)

; Inputs: x0, x1, x2, x3, x4, x5, x6, x7, y0, y1, y2, y3, y4, y5, y6, y7
(declare-fun x0 () (_ BitVec 1))
(declare-fun x1 () (_ BitVec 1))
(declare-fun x2 () (_ BitVec 1))
(declare-fun x3 () (_ BitVec 1))
(declare-fun x4 () (_ BitVec 1))
(declare-fun x5 () (_ BitVec 1))
(declare-fun x6 () (_ BitVec 1))
(declare-fun x7 () (_ BitVec 1))
(declare-fun y0 () (_ BitVec 1))
(declare-fun y1 () (_ BitVec 1))
(declare-fun y2 () (_ BitVec 1))
(declare-fun y3 () (_ BitVec 1))
(declare-fun y4 () (_ BitVec 1))
(declare-fun y5 () (_ BitVec 1))
(declare-fun y6 () (_ BitVec 1))
(declare-fun y7 () (_ BitVec 1))

; Outputs: p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15
(declare-fun p0 () (_ BitVec 1))
(declare-fun p1 () (_ BitVec 1))
(declare-fun p2 () (_ BitVec 1))
(declare-fun p3 () (_ BitVec 1))
(declare-fun p4 () (_ BitVec 1))
(declare-fun p5 () (_ BitVec 1))
(declare-fun p6 () (_ BitVec 1))
(declare-fun p7 () (_ BitVec 1))
(declare-fun p8 () (_ BitVec 1))
(declare-fun p9 () (_ BitVec 1))
(declare-fun p10 () (_ BitVec 1))
(declare-fun p11 () (_ BitVec 1))
(declare-fun p12 () (_ BitVec 1))
(declare-fun p13 () (_ BitVec 1))
(declare-fun p14 () (_ BitVec 1))
(declare-fun p15 () (_ BitVec 1))

; SAT/UNSAT assertion for test_netlist8x8.txt
(assert
	(not		
		(let
			(
				(p0 (bvand x0 y0))
				(t0 (bvand x1 y0))
				(t1 (bvand x0 y1))
				(t2 (bvand x2 y0))
				(t3 (bvand x1 y1))
				(t7 (bvand x3 y0))
				(t8 (bvand x2 y1))
				(t12 (bvand x4 y0))
				(t13 (bvand x3 y1))
				(t17 (bvand x5 y0))
				(t18 (bvand x4 y1))
				(t22 (bvand x6 y0))
				(t23 (bvand x5 y1))
				(t27 (bvand x7 y0))
				(t28 (bvand x6 y1))
				(t32 (bvand x7 y1))
				(t33 (bvand x0 y2))
				(t34 (bvand x1 y2))
				(t38 (bvand x2 y2))
				(t42 (bvand x3 y2))
				(t46 (bvand x4 y2))
				(t50 (bvand x5 y2))
				(t54 (bvand x6 y2))
				(t58 (bvand x7 y2))
			)		
		(let
			(
				(p1 (bvxor t0 t1))
				(c0 (bvand t0 t1))
				(t4 (bvxor t2 t3))
				(t6 (bvand t2 t3))
				(t9 (bvxor t7 t8))
				(t10 (bvand t7 t8))
				(t14 (bvxor t12 t13))
				(t15 (bvand t12 t13))
				(t19 (bvxor t17 t18))
				(t20 (bvand t17 t18))
				(t24 (bvxor t22 t23))
				(t25 (bvand t22 t23))
				(t29 (bvxor t27 t28))
				(t30 (bvand t27 t28))
			)		
		(let
			(
				(s1 (bvxor c0 t4))
				(t5 (bvand c0 t4))
			)		
		(let
			(
				(c1 (bvor t6 t5))
				(p2 (bvxor t33 s1))
				(c8 (bvand t33 s1))
			)		
		(let
			(
				(s2 (bvxor c1 t9))
				(t11 (bvand c1 t9))
			)		
		(let
			(
				(c2 (bvor t10 t11))
				(t35 (bvxor s2 t34))
				(t36 (bvand s2 t34))
			)		
		(let
			(
				(s3 (bvxor c2 t14))
				(t16 (bvand c2 t14))
				(s8 (bvxor t35 c8))
				(t37 (bvand t35 c8))
			)		
		(let
			(
				(c3 (bvor t15 t16))
				(c9 (bvor t36 t37))
				(t39 (bvxor t38 s3))
				(t40 (bvand t38 s3))
			)		
		(let
			(
				(s4 (bvxor c3 t19))
				(t21 (bvand c3 t19))
				(s9 (bvxor t39 c9))
				(t41 (bvand t39 c9))
			)		
		(let
			(
				(c4 (bvor t21 t20))
				(c10 (bvor t40 t41))
				(t43 (bvxor t42 s4))
				(t44 (bvand t42 s4))
			)		
		(let
			(
				(s5 (bvxor c4 t24))
				(t26 (bvand c4 t24))
				(s10 (bvxor t43 c10))
				(t45 (bvand t43 c10))
			)		
		(let
			(
				(c5 (bvor t25 t26))
				(c11 (bvor t44 t45))
				(t47 (bvxor s5 t46))
				(t48 (bvand s5 t46))
			)		
		(let
			(
				(s6 (bvxor c5 t29))
				(t31 (bvand c5 t29))
				(s11 (bvxor c11 t47))
				(t49 (bvand c11 t47))
			)		
		(let
			(
				(c6 (bvor t30 t31))
				(c12 (bvor t48 t49))
				(t51 (bvxor s6 t50))
				(t52 (bvand s6 t50))
			)		
		(let
			(
				(s7 (bvxor t32 c6))
				(c7 (bvand t32 c6))
				(s12 (bvxor c12 t51))
				(t53 (bvand c12 t51))
			)		
		(let
			(
				(c13 (bvor t52 t53))
				(t55 (bvxor s7 t54))
				(t56 (bvand s7 t54))
				(s14 (bvxor c7 t58))
				(c15 (bvand c7 t58))
			)		
		(let
			(
				(s13 (bvxor c13 t55))
				(t57 (bvand c13 t55))
			)		
		(let
			(
				(c14 (bvor t56 t57))
			)
	)	
)
(check-sat)
(get-model)
