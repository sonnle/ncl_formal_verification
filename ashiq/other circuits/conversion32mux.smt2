; Formal verification proof - input completeness of test_netlist32mux.txt
(set-logic QF_BV)

; Inputs: a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, s0
(declare-fun a0 () (_ BitVec 1))
(declare-fun a1 () (_ BitVec 1))
(declare-fun a2 () (_ BitVec 1))
(declare-fun a3 () (_ BitVec 1))
(declare-fun a4 () (_ BitVec 1))
(declare-fun a5 () (_ BitVec 1))
(declare-fun a6 () (_ BitVec 1))
(declare-fun a7 () (_ BitVec 1))
(declare-fun a8 () (_ BitVec 1))
(declare-fun a9 () (_ BitVec 1))
(declare-fun a10 () (_ BitVec 1))
(declare-fun a11 () (_ BitVec 1))
(declare-fun a12 () (_ BitVec 1))
(declare-fun a13 () (_ BitVec 1))
(declare-fun a14 () (_ BitVec 1))
(declare-fun a15 () (_ BitVec 1))
(declare-fun b0 () (_ BitVec 1))
(declare-fun b1 () (_ BitVec 1))
(declare-fun b2 () (_ BitVec 1))
(declare-fun b3 () (_ BitVec 1))
(declare-fun b4 () (_ BitVec 1))
(declare-fun b5 () (_ BitVec 1))
(declare-fun b6 () (_ BitVec 1))
(declare-fun b7 () (_ BitVec 1))
(declare-fun b8 () (_ BitVec 1))
(declare-fun b9 () (_ BitVec 1))
(declare-fun b10 () (_ BitVec 1))
(declare-fun b11 () (_ BitVec 1))
(declare-fun b12 () (_ BitVec 1))
(declare-fun b13 () (_ BitVec 1))
(declare-fun b14 () (_ BitVec 1))
(declare-fun b15 () (_ BitVec 1))
(declare-fun s0 () (_ BitVec 1))

; Outputs: p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15
(declare-fun p0 () (_ BitVec 1))
(declare-fun p1 () (_ BitVec 1))
(declare-fun p2 () (_ BitVec 1))
(declare-fun p3 () (_ BitVec 1))
(declare-fun p4 () (_ BitVec 1))
(declare-fun p5 () (_ BitVec 1))
(declare-fun p6 () (_ BitVec 1))
(declare-fun p7 () (_ BitVec 1))
(declare-fun p8 () (_ BitVec 1))
(declare-fun p9 () (_ BitVec 1))
(declare-fun p10 () (_ BitVec 1))
(declare-fun p11 () (_ BitVec 1))
(declare-fun p12 () (_ BitVec 1))
(declare-fun p13 () (_ BitVec 1))
(declare-fun p14 () (_ BitVec 1))
(declare-fun p15 () (_ BitVec 1))

; SAT/UNSAT assertion for test_netlist32mux.txt
(assert
	(not		
		(let
			(
				(t0 (bvand a0 s0))
				(t1 (bvand b0 s0))
				(t2 (bvand a1 s0))
				(t3 (bvand b1 s0))
				(t4 (bvand a2 s0))
				(t5 (bvand b2 s0))
				(t6 (bvand a3 s0))
				(t7 (bvand b3 s0))
				(t8 (bvand a4 s0))
				(t9 (bvand b4 s0))
				(t10 (bvand a5 s0))
				(t11 (bvand b5 s0))
				(t12 (bvand a6 s0))
				(t13 (bvand b6 s0))
				(t14 (bvand a7 s0))
				(t15 (bvand b7 s0))
				(t16 (bvand a8 s0))
				(t17 (bvand b8 s0))
				(t18 (bvand a9 s0))
				(t19 (bvand b9 s0))
				(t20 (bvand a10 s0))
				(t21 (bvand b10 s0))
				(t22 (bvand a11 s0))
				(t23 (bvand b11 s0))
				(t24 (bvand a12 s0))
				(t25 (bvand b12 s0))
				(t26 (bvand a13 s0))
				(t27 (bvand b13 s0))
				(t28 (bvand a14 s0))
				(t29 (bvand b14 s0))
				(t30 (bvand a15 s0))
				(t31 (bvand b15 s0))
			)		
		(let
			(
				(p0 (bvor t0 t1))
				(p1 (bvor t2 t3))
				(p2 (bvor t4 t5))
				(p3 (bvor t6 t7))
				(p4 (bvor t8 t9))
				(p5 (bvor t10 t11))
				(p6 (bvor t12 t13))
				(p7 (bvor t14 t15))
				(p8 (bvor t16 t17))
				(p9 (bvor t18 t19))
				(p10 (bvor t20 t21))
				(p11 (bvor t22 t23))
				(p12 (bvor t24 t25))
				(p13 (bvor t26 t27))
				(p14 (bvor t28 t29))
				(p15 (bvor t30 t31))
			)
		(let
			(
				(a (concat a15 a14 a13 a12 a11 a10 a9 a8 a7 a6 a5 a4 a3 a2 a1 a0))
				(b (concat b15 b14 b13 b12 b11 b10 b9 b8 b7 b6 b5 b4 b3 b2 b1 b0))
				(out_sync (bvor (bvand a (not s0)) (bvand b s0)))
			)
		(let
			(
				(out_pchb (concat p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 p0))
			)
		(= out_pchb out_sync) ))))
	)	
)
(check-sat)
(get-model)
